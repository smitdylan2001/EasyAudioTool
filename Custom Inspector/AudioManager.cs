using System.Collections.Generic;
using UnityEngine;

[System.Serializable]
public class AudioManager : MonoBehaviour
{
	//Make singleton from AudioManager
	private static AudioManager _instance;
	public static AudioManager Instance
	{
		get
		{
			if (_instance == null)
			{
				_instance = GameObject.FindObjectOfType<AudioManager>();
				if (_instance == null)
				{
					GameObject audioManagerGO = new GameObject("AudioManager_AutoGenerated");
					_instance = audioManagerGO.AddComponent<AudioManager>();
					_instance._interactRange = 10f;
					_instance = GameObject.FindObjectOfType<AudioManager>();
				}
			}

			return _instance;
		}
	}
	public static AudioManager GetAudioManager()
	{
		return Instance;
	}

	[SerializeField] [Tooltip("Drag the player gameobject here. If none is present, the first object with the name 'Player' or with tag 'Player' will be used")]
	private GameObject _player;
	public GameObject Player { get { return _player; } private set { _player = value; } }
	[SerializeField] [Range(1, 30)] [Tooltip("The range within the player can interact with clickable audio objects. Can be visualized with 'visualize clickable range' below")]
	private float _interactRange = 10f;
	[SerializeField] [Tooltip("Vizualizes the range in which the player can interact with clickable audio objects")]
	private bool _visualizeClickableRange = false;
	[SerializeField] [Tooltip("Will put a crosshair in he middle of the in-game screen using a canvas. Crosshair can be set in 'Easy Audio Tool/Resources'")]
	private bool _showCrosshair = false; 
	[SerializeField] [Tooltip("Will visualize an icon on all objects in the audio contents list")]
	private bool _showAudioObjects = false;
	[SerializeField] [Tooltip("Enable viewing of max audio distance of all objects")]
	private  bool showAudioDistance;
	[HideInInspector] [Tooltip("This will hold all audio objects in the scene")] //HideInInspector for custom Reorderable List in AudioInspector.cs
	public List<AudioContents> AudioContents = new List<AudioContents>();

	private Dictionary<GameObject, AudioComponents> _audioDictionary = new Dictionary<GameObject, AudioComponents>();

	//Stores all the required components for the audio
	private struct AudioComponents
	{
		//Fill all variables for the audio 
		public AudioComponents(AudioContents.StartType st, AudioClip ac, float v, float r)
		{
			startType = st;
			audioClip = ac;
			volume = v;
			range = r;
		}

		public AudioContents.StartType startType;
		public AudioClip audioClip;
		public float volume;
		public float range;
	}

	//Toggle debug features depending on if the game is running in Unity or as a build
	private void Awake()
	{
#if UNITY_EDITOR
		Debug.unityLogger.logEnabled = true;
#else
		_showAudioDistance = false;
		_visualizeClickableRange = false;
		
		Debug.unityLogger.logEnabled = false;
#endif

		_instance = this;
	}

	//Gather and configure all data needed for the audiomanager to work
	private void Start()
	{
		//Get player Game Object if the _player variable is empty
		_player = GetPlayer();

		InitializePlayerAudioComponent();

		AddAudioContentsToDictionary();

		if (_showCrosshair) ShowCrosshair();
	}

#if UNITY_EDITOR
	private void OnDrawGizmos()
	{
		if (showAudioDistance || _showAudioObjects)
		{
			foreach (AudioContents ac in AudioContents)
			{
				if (_showAudioObjects)
				{
					if(ac.gameObject) Gizmos.DrawIcon(ac.gameObject.transform.position, "d_preAudioAutoPlayOn", true);
				}
				if (showAudioDistance)
				{
					Gizmos.color = new Color(1, 0.1f, 0.1f, 0.1f);
					if (ac.gameObject) Gizmos.DrawSphere(ac.gameObject.transform.position, ac.range);
				}
			}
		}
		
		if (_visualizeClickableRange)
		{
			Gizmos.color = new Color(1, 1f, 1f, 0.1f);
			Gizmos.DrawSphere(_player.transform.position, _interactRange);
		}
	}
#endif

	//Get player Game Object if possible
	private GameObject GetPlayer()
	{
		if (_player) return _player;
		if (GameObject.FindGameObjectWithTag("Player")) return GameObject.FindGameObjectWithTag("Player");
		if (GameObject.Find("Player")) return GameObject.Find("Player");

		Debug.LogError("No player recognized in the '" + this.name +
						"' script on the '" + gameObject.name + "' Game Object!\nNew Player Object made.");
		return new GameObject("Player_AutoGenerated");
	}

	//Initialize PlayerAudioComponent if not added already
	private void InitializePlayerAudioComponent()
	{
		//Add PlayerAudioComponent script to _player Game Object for audio at runtime
		PlayerAudioComponent playerAudio;
		if (!_player.GetComponent<PlayerAudioComponent>())
		{
			playerAudio = _player.AddComponent<PlayerAudioComponent>();
		}
		else
		{
			playerAudio = _player.GetComponent<PlayerAudioComponent>();
		}
		playerAudio.Initialize(this, _interactRange);
	}

	//Add audio contents to the audio dictionary
	private void AddAudioContentsToDictionary()
	{
		//Add all audio contents in a directory, the key will be the gameobject and the value will be all audio components needed
		if (AudioContents.Count > 0)
		{

			foreach (AudioContents ac in AudioContents)
				{
					if (!ac.gameObject || !ac.audioClip)
					{
						if (!ac.gameObject) Debug.LogError("No Gameobject on the AudioManager component on the '" + gameObject.name + "' Game Object");
						if (!ac.audioClip) Debug.LogError("No AudioClip on the AudioManager component on the '" + gameObject.name + "' Game Object");
						return;
					}
					else if (!ac.gameObject.GetComponent<AudioSource>()) ac.gameObject.AddComponent<AudioSource>();
					if (ac.volume == 0) Debug.LogWarning("AudioClip '" + ac.audioClip.name + "' on the AudioManager Component on '" + gameObject.name +
															"' has a volume of zero and will not be heard. Increase the volume if this is unintentional.");

					AddToAudioDictionary(ac.gameObject, new AudioComponents(ac.startType, ac.audioClip, ac.volume, ac.range));
				}
			
		}
		else Debug.LogError("There are no Audio Components on the '" + this.name +
							"' component on the '" + gameObject.name + "' Game Object!");
	}

	//Shows crosshair when enabled
	private void ShowCrosshair()
	{
		Object crosshairCanvas = Instantiate(Resources.Load("CrosshairCanvas"));
		if (!crosshairCanvas)
		{
			Debug.LogError("Crosshair is enabled in the AudioManager Component on the '" + gameObject.name +
							"' Game Object, but the Crosshair canvas could not be spawned. Make sure the CrosshairCanvas prefab is in the Resources folder within the Audio Tool folder.");
		}
	}

	//External: Add audio from script
	public void AddAudio(GameObject go, AudioContents ac)
	{
		AddToAudioDictionary(ac.gameObject, new AudioComponents(ac.startType, ac.audioClip, ac.volume, ac.range));
	}

	//Add audio to dictionary
	private void AddToAudioDictionary(GameObject go, AudioComponents ac)
	{
		if(!go.GetComponent<Collider>() || !go.GetComponent<BoxCollider>() 
			|| !go.GetComponent<CapsuleCollider>() || !go.GetComponent<MeshCollider>() 
			|| !go.GetComponent<SphereCollider>())
		{
			Debug.LogError("Gameobject " + go.name + " has no Collider component. Please add a collider to the object.");
			return;
		}
		_audioDictionary.Add(go, ac);
	}

	//Play the audio connected to the Game Object
	public void PlayAudio(GameObject go, AudioContents.StartType startType)
	{
		if (_audioDictionary.ContainsKey(go))
		{
			AudioComponents component = _audioDictionary[go];

			//Check if the start type for the audio is correct
			if (component.startType == startType)
			{
				//Get audio source and play the audio clip
				AudioSource audioSource = go.GetComponent<AudioSource>();
				audioSource.Stop();
				audioSource.clip = component.audioClip;
				audioSource.maxDistance = component.range;
				audioSource.volume = component.volume / 100;
				audioSource.Play();
			}
		}
	}
}
