using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class AudioManager : MonoBehaviour
{
	private static AudioManager _instance;
	public static AudioManager Instance
	{
		get
		{
			if (_instance == null)
			{
				_instance = GameObject.FindObjectOfType<AudioManager>();
				if (_instance == null)
				{
					GameObject audioManagerGO = new GameObject("AudioManager_AutoGenerated");
					_instance = audioManagerGO.AddComponent<AudioManager>();
					_instance._interactRange = 10f;
					_instance = GameObject.FindObjectOfType<AudioManager>();
				}
			}

			return _instance;
		}
	}
	public static AudioManager GetAudioManager()
	{
		return Instance;
	}

	[SerializeField] private GameObject _player;
	public GameObject Player { get { return _player; } private set { _player = value; } }
	[SerializeField] [Range(0, 20)] private float _interactRange;
	[SerializeField] private bool _showCrosshair;
	[SerializeField] private AudioContents[] _audioContents;

	private Dictionary<GameObject, AudioComponents> _audioDictionary = new Dictionary<GameObject, AudioComponents>();

	//Stores all the required components for the audio
	private struct AudioComponents
	{
		//Fill all variables for the audio 
		public AudioComponents(AudioContents.StartType st, AudioClip ac, float v)
		{
			startType = st;
			audioClip = ac;
			volume = v;
		}

		public AudioContents.StartType startType;
		public AudioClip audioClip;
		public float volume;
	}

	//Toggle debug features depending on if the game is running in Unity or as a build
	private void Awake()
	{
#if UNITY_EDITOR
		Debug.unityLogger.logEnabled = true;
#else
		Debug.unityLogger.logEnabled = false;
#endif

		_instance = this;
	}

	//Gather and configure all data needed for the audiomanager to work
	private void Start()
	{
		//Get player Game Object if the _player variable is empty
		_player = GetPlayer();

		InitializePlayerAudioComponent();

		AddAudioContentsToDictionary();

		if (_showCrosshair) ShowCrosshair();
	}

	private GameObject GetPlayer()
	{
		if (_player) return _player;
		if (GameObject.FindGameObjectWithTag("Player")) return GameObject.FindGameObjectWithTag("Player");
		if (GameObject.Find("Player")) return GameObject.Find("Player");

		Debug.LogError("No player recognized in the '" + this.name +
						"' script on the '" + gameObject.name + "' Game Object!\nNew Player Object made.");
		return new GameObject("Player_AutoGenerated");
	}
	private void InitializePlayerAudioComponent()
	{
		//Add PlayerAudioComponent script to _player Game Object for audio at runtime
		PlayerAudioComponent playerAudio;
		if (!_player.GetComponent<PlayerAudioComponent>())
		{
			playerAudio = _player.AddComponent<PlayerAudioComponent>();
		}
		else
		{
			playerAudio = _player.GetComponent<PlayerAudioComponent>();
		}
		playerAudio.Initialize(this, _interactRange);
	}

	private void AddAudioContentsToDictionary()
	{
		//Add all audio contents in a directory, the key will be the gameobject and the value will be all audio components needed
		if (_audioContents.Length > 0)
		{
			foreach (AudioContents ac in _audioContents)
			{
				if (!ac.gameObject || !ac.audioClip)
				{
					if (!ac.gameObject) Debug.LogError("No Gameobject on the AudioManager component on the '" + gameObject.name + "' Game Object");
					if (!ac.audioClip) Debug.LogError("No AudioClip on the AudioManager component on the '" + gameObject.name + "' Game Object");
					return;
				}
				else if (!ac.gameObject.GetComponent<AudioSource>()) ac.gameObject.AddComponent<AudioSource>();
				if (ac.volume == 0) Debug.LogWarning("AudioClip '" + ac.audioClip.name + "' on the AudioManager Component on '" + gameObject.name + 
														"' has a volume of zero and will not be heard. Increase the volume if this is unintentional.");

				AddToAudioDictionary(ac.gameObject, new AudioComponents(ac.startType, ac.audioClip, ac.volume));
			}
		}
		else Debug.LogError("There are no Audio Components on the '" + this.name +
							"' component on the '" + gameObject.name + "' Game Object!");
	}

	private void ShowCrosshair()
	{
		Object crosshairCanvas = Instantiate(Resources.Load("CrosshairCanvas"));
		if (!crosshairCanvas)
		{
			Debug.LogError("Crosshair is enabled in the AudioManager Component on the '" + gameObject.name +
							"' Game Object, but the Crosshair canvas could not be spawned. Make sure the CrosshairCanvas prefab is in the Resources folder within the Audio Tool folder.");
		}
	}

	public void AddAudio(GameObject go, AudioContents ac)
	{
		AddToAudioDictionary(ac.gameObject, new AudioComponents(ac.startType, ac.audioClip, ac.volume));
	}

	private void AddToAudioDictionary(GameObject go, AudioComponents ac)
	{
		_audioDictionary.Add(go, ac);
	}

	//Play the audio connected to the Game Object
	public void PlayAudio(GameObject go, AudioContents.StartType startType)
	{
		if (_audioDictionary.ContainsKey(go))
		{
			AudioComponents component = _audioDictionary[go];

			//Check if the start type for the audio is correct
			if (component.startType == startType)
			{
				//Get audio source and play the audio clip
				AudioSource audioSource = go.GetComponent<AudioSource>();
				audioSource.Stop();
				audioSource.clip = component.audioClip;
				audioSource.volume = component.volume / 100;
				audioSource.Play();
			}
		}
	}
}
